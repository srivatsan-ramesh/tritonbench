#blocked = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 32], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [32, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [32, 1], order = [1, 0]}>
#loc = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [8, 4], instrShape = [16, 32, 32]}>
#shared = #triton_gpu.shared<{vec = 16, perPhase = 2, maxPhase = 4, order = [1, 0], hasLeadingOffset = true}>
#shared1 = #triton_gpu.shared<{vec = 16, perPhase = 2, maxPhase = 4, order = [0, 1], hasLeadingOffset = true}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 32 : i32, "triton_gpu.proton-slots" = 1024 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel_profile(%arg0: !tt.ptr<f8E4M3FN> {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0), %arg1: !tt.ptr<f8E4M3FN> {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0), %arg9: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":192:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x128xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<128x64xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x128xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked1> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c127_i32 : i32 loc(#loc55)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc56)
    %3 = arith.addi %arg4, %c127_i32 : i32 loc(#loc57)
    %4 = arith.divsi %3, %c128_i32 : i32 loc(#loc58)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc7)
    %6 = arith.divsi %0, %5 : i32 loc(#loc8)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc9)
    %8 = arith.subi %2, %7 : i32 loc(#loc10)
    %9 = arith.minsi %8, %c8_i32 : i32 loc(#loc11)
    %10 = arith.remsi %0, %5 : i32 loc(#loc12)
    %11 = arith.remsi %10, %9 : i32 loc(#loc13)
    %12 = arith.addi %7, %11 : i32 loc(#loc14)
    %13 = arith.divsi %10, %9 : i32 loc(#loc15)
    %14 = arith.muli %12, %c128_i32 : i32 loc(#loc16)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc17)
    %16 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc17)
    %17 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %18 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc17)
    %19 = tt.splat %14 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc18)
    %20 = tt.splat %14 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc18)
    %21 = arith.addi %19, %15 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc18)
    %22 = arith.addi %20, %16 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc18)
    %23 = tt.splat %arg3 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc19)
    %24 = arith.remsi %21, %23 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc19)
    %25 = arith.muli %13, %c128_i32 : i32 loc(#loc20)
    %26 = tt.splat %25 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc21)
    %27 = tt.splat %25 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc21)
    %28 = arith.addi %26, %17 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc21)
    %29 = arith.addi %27, %18 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc21)
    %30 = tt.splat %arg4 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %31 = arith.remsi %28, %30 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %32 = tt.expand_dims %24 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc23)
    %33 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc24)
    %34 = arith.muli %32, %33 : tensor<128x1xi32, #blocked1> loc(#loc24)
    %35 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc25)
    %36 = tt.expand_dims %35 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc25)
    %37 = tt.broadcast %34 : tensor<128x1xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc26)
    %38 = tt.broadcast %36 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc26)
    %39 = arith.addi %37, %38 : tensor<128x64xi32, #blocked1> loc(#loc26)
    %40 = tt.splat %arg0 : !tt.ptr<f8E4M3FN> -> tensor<128x64x!tt.ptr<f8E4M3FN>, #blocked1> loc(#loc27)
    %41 = tt.addptr %40, %39 : tensor<128x64x!tt.ptr<f8E4M3FN>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc27)
    %42 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc28)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc28)
    %44 = tt.expand_dims %31 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc29)
    %45 = tt.splat %arg7 : i32 -> tensor<1x128xi32, #blocked> loc(#loc30)
    %46 = arith.muli %44, %45 : tensor<1x128xi32, #blocked> loc(#loc30)
    %47 = tt.broadcast %43 : tensor<64x1xi32, #blocked> -> tensor<64x128xi32, #blocked> loc(#loc31)
    %48 = tt.broadcast %46 : tensor<1x128xi32, #blocked> -> tensor<64x128xi32, #blocked> loc(#loc31)
    %49 = arith.addi %47, %48 : tensor<64x128xi32, #blocked> loc(#loc31)
    %50 = tt.splat %arg1 : !tt.ptr<f8E4M3FN> -> tensor<64x128x!tt.ptr<f8E4M3FN>, #blocked> loc(#loc32)
    %51 = tt.addptr %50, %49 : tensor<64x128x!tt.ptr<f8E4M3FN>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc32)
    %52 = arith.addi %arg5, %c63_i32 : i32 loc(#loc59)
    %53 = arith.divsi %52, %c64_i32 : i32 loc(#loc60)
    %54 = tt.fp_to_fp %cst_2, rounding = rtne : tensor<128x64xf32, #blocked1> -> tensor<128x64xf8E4M3FN, #blocked1> loc(#loc34)
    %55 = tt.fp_to_fp %cst_1, rounding = rtne : tensor<64x128xf32, #blocked> -> tensor<64x128xf8E4M3FN, #blocked> loc(#loc35)
    %56 = triton_gpu.local_alloc  : () -> !tt.memdesc<3x128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> loc(#loc34)
    %57 = triton_gpu.local_alloc  : () -> !tt.memdesc<3x64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc35)
    %58 = arith.cmpi sgt, %53, %c0_i32 : i32 loc(#loc36)
    %59 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc37)
    %60 = arith.cmpi slt, %36, %59 : tensor<1x64xi32, #blocked1> loc(#loc37)
    %61 = tt.broadcast %60 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc34)
    %62 = triton_gpu.memdesc_subview %56[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<3x128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> loc(#loc34)
    %63 = tt.splat %58 : i1 -> tensor<128x64xi1, #blocked1> loc(#loc36)
    %64 = arith.andi %63, %61 : tensor<128x64xi1, #blocked1> loc(#loc36)
    %65 = triton_gpu.async_copy_global_to_local %41, %62 mask %64 other %54 : tensor<128x64x!tt.ptr<f8E4M3FN>, #blocked1> -> <128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> loc(#loc34)
    %66 = triton_gpu.async_commit_group %65 loc(#loc34)
    %67 = tt.splat %arg5 : i32 -> tensor<64x1xi32, #blocked> loc(#loc38)
    %68 = arith.cmpi slt, %43, %67 : tensor<64x1xi32, #blocked> loc(#loc38)
    %69 = tt.broadcast %68 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc35)
    %70 = triton_gpu.memdesc_subview %57[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<3x64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc35)
    %71 = tt.splat %58 : i1 -> tensor<64x128xi1, #blocked> loc(#loc36)
    %72 = arith.andi %71, %69 : tensor<64x128xi1, #blocked> loc(#loc36)
    %73 = triton_gpu.async_copy_global_to_local %51, %70 mask %72 other %55 : tensor<64x128x!tt.ptr<f8E4M3FN>, #blocked> -> <64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc35)
    %74 = triton_gpu.async_commit_group %73 loc(#loc35)
    %75 = arith.cmpi sgt, %53, %c1_i32 : i32 loc(#loc36)
    %76 = tt.addptr %41, %cst_0 : tensor<128x64x!tt.ptr<f8E4M3FN>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc39)
    %77 = tt.addptr %51, %cst : tensor<64x128x!tt.ptr<f8E4M3FN>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc40)
    %78 = arith.subi %arg5, %c64_i32 : i32 loc(#loc41)
    %79 = tt.splat %78 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc37)
    %80 = arith.cmpi slt, %36, %79 : tensor<1x64xi32, #blocked1> loc(#loc37)
    %81 = tt.broadcast %80 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc34)
    %82 = triton_gpu.memdesc_subview %56[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<3x128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> loc(#loc34)
    %83 = tt.splat %75 : i1 -> tensor<128x64xi1, #blocked1> loc(#loc36)
    %84 = arith.andi %83, %81 : tensor<128x64xi1, #blocked1> loc(#loc36)
    %85 = triton_gpu.async_copy_global_to_local %76, %82 mask %84 other %54 : tensor<128x64x!tt.ptr<f8E4M3FN>, #blocked1> -> <128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> loc(#loc34)
    %86 = triton_gpu.async_commit_group %85 loc(#loc34)
    %87 = tt.splat %78 : i32 -> tensor<64x1xi32, #blocked> loc(#loc38)
    %88 = arith.cmpi slt, %43, %87 : tensor<64x1xi32, #blocked> loc(#loc38)
    %89 = tt.broadcast %88 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc35)
    %90 = triton_gpu.memdesc_subview %57[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<3x64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc35)
    %91 = tt.splat %75 : i1 -> tensor<64x128xi1, #blocked> loc(#loc36)
    %92 = arith.andi %91, %89 : tensor<64x128xi1, #blocked> loc(#loc36)
    %93 = triton_gpu.async_copy_global_to_local %77, %90 mask %92 other %55 : tensor<64x128x!tt.ptr<f8E4M3FN>, #blocked> -> <64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc35)
    %94 = triton_gpu.async_commit_group %93 loc(#loc35)
    %95:7 = scf.for %arg10 = %c0_i32 to %53 step %c1_i32 iter_args(%arg11 = %cst_3, %arg12 = %76, %arg13 = %77, %arg14 = %c1_i32, %arg15 = %c-1_i32, %arg16 = %74, %arg17 = %94) -> (tensor<128x128xf32, #mma>, tensor<128x64x!tt.ptr<f8E4M3FN>, #blocked1>, tensor<64x128x!tt.ptr<f8E4M3FN>, #blocked>, i32, i32, !triton_gpu.async.token, !triton_gpu.async.token)  : i32 {
      %116 = arith.subi %53, %c2_i32 : i32 loc(#loc36)
      %117 = arith.cmpi slt, %arg10, %116 : i32 loc(#loc36)
      %118 = arith.addi %arg15, %c1_i32 : i32 loc(#loc36)
      %119 = arith.cmpi slt, %118, %c3_i32 : i32 loc(#loc36)
      %120 = arith.select %119, %118, %c0_i32 : i32 loc(#loc36)
      %121 = triton_gpu.memdesc_subview %56[%120, %c0_i32, %c0_i32] : !tt.memdesc<3x128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> loc(#loc34)
      %122 = triton_gpu.async_wait %arg16 {num = 2 : i32} loc(#loc34)
      %123 = triton_gpu.memdesc_subview %57[%120, %c0_i32, %c0_i32] : !tt.memdesc<3x64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc35)
      %124 = triton_nvidia_gpu.warp_group_dot %121, %123, %arg11 {inputPrecision = 0 : i32, isAsync = true, maxNumImpreciseAcc = 1073741824 : i32} : !tt.memdesc<128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> * !tt.memdesc<64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<128x128xf32, #mma> loc(#loc42)
      %125:3 = triton_nvidia_gpu.warp_group_dot_wait %124, %121, %123 {pendings = 1 : i32} : tensor<128x128xf32, #mma>, !tt.memdesc<128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable>, !tt.memdesc<64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc42)
      %126 = tt.addptr %arg12, %cst_0 : tensor<128x64x!tt.ptr<f8E4M3FN>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc39)
      %127 = tt.addptr %arg13, %cst : tensor<64x128x!tt.ptr<f8E4M3FN>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc40)
      %128 = arith.addi %arg14, %c1_i32 : i32 loc(#loc36)
      %129 = arith.cmpi slt, %128, %c3_i32 : i32 loc(#loc36)
      %130 = arith.select %129, %128, %c0_i32 : i32 loc(#loc36)
      %131 = arith.addi %arg10, %c2_i32 : i32 loc(#loc36)
      %132 = arith.muli %131, %c64_i32 : i32 loc(#loc43)
      %133 = arith.subi %arg5, %132 : i32 loc(#loc41)
      %134 = tt.splat %133 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc37)
      %135 = arith.cmpi slt, %36, %134 : tensor<1x64xi32, #blocked1> loc(#loc37)
      %136 = tt.broadcast %135 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc34)
      %137 = triton_gpu.memdesc_subview %56[%130, %c0_i32, %c0_i32] : !tt.memdesc<3x128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> loc(#loc34)
      %138 = tt.splat %117 : i1 -> tensor<128x64xi1, #blocked1> loc(#loc36)
      %139 = arith.andi %138, %136 : tensor<128x64xi1, #blocked1> loc(#loc36)
      %140 = triton_gpu.async_copy_global_to_local %126, %137 mask %139 other %54 : tensor<128x64x!tt.ptr<f8E4M3FN>, #blocked1> -> <128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> loc(#loc34)
      %141 = triton_gpu.async_commit_group %140 loc(#loc34)
      %142 = tt.splat %133 : i32 -> tensor<64x1xi32, #blocked> loc(#loc38)
      %143 = arith.cmpi slt, %43, %142 : tensor<64x1xi32, #blocked> loc(#loc38)
      %144 = tt.broadcast %143 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc35)
      %145 = triton_gpu.memdesc_subview %57[%130, %c0_i32, %c0_i32] : !tt.memdesc<3x64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc35)
      %146 = tt.splat %117 : i1 -> tensor<64x128xi1, #blocked> loc(#loc36)
      %147 = arith.andi %146, %144 : tensor<64x128xi1, #blocked> loc(#loc36)
      %148 = triton_gpu.async_copy_global_to_local %127, %145 mask %147 other %55 : tensor<64x128x!tt.ptr<f8E4M3FN>, #blocked> -> <64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc35)
      %149 = triton_gpu.async_commit_group %148 loc(#loc35)
      scf.yield %125#0, %126, %127, %130, %120, %arg17, %149 : tensor<128x128xf32, #mma>, tensor<128x64x!tt.ptr<f8E4M3FN>, #blocked1>, tensor<64x128x!tt.ptr<f8E4M3FN>, #blocked>, i32, i32, !triton_gpu.async.token, !triton_gpu.async.token loc(#loc36)
    } loc(#loc36)
    %96 = triton_nvidia_gpu.warp_group_dot_wait %95#0 {pendings = 0 : i32} : tensor<128x128xf32, #mma> loc(#loc36)
    %97 = triton_gpu.async_wait  {num = 0 : i32} loc(#loc36)
    triton_gpu.local_dealloc %56 : !tt.memdesc<3x128x64xf8E4M3FN, #shared, #triton_gpu.shared_memory, mutable> loc(#loc36)
    triton_gpu.local_dealloc %57 : !tt.memdesc<3x64x128xf8E4M3FN, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc36)
    %98 = arith.truncf %96 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma> loc(#loc44)
    %99 = tt.expand_dims %22 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc45)
    %100 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc46)
    %101 = arith.muli %100, %99 : tensor<128x1xi32, #blocked2> loc(#loc46)
    %102 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<128x1x!tt.ptr<f16>, #blocked2> loc(#loc47)
    %103 = tt.addptr %102, %101 : tensor<128x1x!tt.ptr<f16>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc47)
    %104 = tt.expand_dims %29 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x128xi32, #blocked2> loc(#loc48)
    %105 = tt.broadcast %103 : tensor<128x1x!tt.ptr<f16>, #blocked2> -> tensor<128x128x!tt.ptr<f16>, #blocked2> loc(#loc49)
    %106 = tt.broadcast %104 : tensor<1x128xi32, #blocked2> -> tensor<128x128xi32, #blocked2> loc(#loc49)
    %107 = tt.addptr %105, %106 : tensor<128x128x!tt.ptr<f16>, #blocked2>, tensor<128x128xi32, #blocked2> loc(#loc49)
    %108 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc50)
    %109 = arith.cmpi slt, %99, %108 : tensor<128x1xi32, #blocked2> loc(#loc50)
    %110 = tt.splat %arg4 : i32 -> tensor<1x128xi32, #blocked2> loc(#loc51)
    %111 = arith.cmpi slt, %104, %110 : tensor<1x128xi32, #blocked2> loc(#loc51)
    %112 = tt.broadcast %109 : tensor<128x1xi1, #blocked2> -> tensor<128x128xi1, #blocked2> loc(#loc52)
    %113 = tt.broadcast %111 : tensor<1x128xi1, #blocked2> -> tensor<128x128xi1, #blocked2> loc(#loc52)
    %114 = arith.andi %112, %113 : tensor<128x128xi1, #blocked2> loc(#loc52)
    %115 = triton_gpu.convert_layout %98 : tensor<128x128xf16, #mma> -> tensor<128x128xf16, #blocked2> loc(#loc53)
    tt.store %107, %115, %114 : tensor<128x128x!tt.ptr<f16>, #blocked2> loc(#loc53)
    tt.return loc(#loc54)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":225:24)
#loc3 = loc("/home/srir/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":226:27)
#loc5 = loc("/home/srir/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":227:27)
#loc7 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":228:38)
#loc8 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":229:22)
#loc9 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":230:29)
#loc10 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":231:35)
#loc11 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":231:48)
#loc12 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":232:34)
#loc13 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":232:54)
#loc14 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":232:27)
#loc15 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":233:40)
#loc16 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":242:23)
#loc17 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":242:51)
#loc18 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":242:38)
#loc19 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":242:68)
#loc20 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":243:23)
#loc21 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":243:38)
#loc22 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":243:68)
#loc23 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":245:30)
#loc24 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":245:41)
#loc25 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":245:60)
#loc26 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":245:53)
#loc27 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":245:22)
#loc28 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":246:29)
#loc29 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":246:60)
#loc30 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":246:71)
#loc31 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":246:52)
#loc32 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":246:22)
#loc33 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":254:33)
#loc34 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":257:20)
#loc35 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":258:20)
#loc36 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":254:22)
#loc37 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":257:51)
#loc38 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":258:51)
#loc39 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":262:18)
#loc40 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":263:18)
#loc41 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":257:55)
#loc42 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":260:35)
#loc43 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":257:59)
#loc44 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":268:23)
#loc45 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":274:41)
#loc46 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":274:33)
#loc47 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":274:21)
#loc48 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":274:72)
#loc49 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":274:52)
#loc50 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":275:33)
#loc51 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":275:58)
#loc52 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":275:39)
#loc53 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":276:21)
#loc54 = loc("/home/srir/tritonbench/tritonbench/operators/fp8_gemm/tutorial_profile.py":276:4)
#loc55 = loc(callsite(#loc3 at #loc4))
#loc56 = loc(callsite(#loc5 at #loc4))
#loc57 = loc(callsite(#loc3 at #loc6))
#loc58 = loc(callsite(#loc5 at #loc6))
#loc59 = loc(callsite(#loc3 at #loc33))
#loc60 = loc(callsite(#loc5 at #loc33))
