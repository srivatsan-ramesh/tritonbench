//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	_matmul_partition_k     // -- Begin function _matmul_partition_k
.extern .shared .align 16 .b8 global_smem[];
                                        // @_matmul_partition_k
.visible .entry _matmul_partition_k(
	.param .u64 _matmul_partition_k_param_0,
	.param .u64 _matmul_partition_k_param_1,
	.param .u64 _matmul_partition_k_param_2,
	.param .u32 _matmul_partition_k_param_3,
	.param .u32 _matmul_partition_k_param_4,
	.param .u32 _matmul_partition_k_param_5,
	.param .u32 _matmul_partition_k_param_6,
	.param .u32 _matmul_partition_k_param_7,
	.param .u32 _matmul_partition_k_param_8,
	.param .u32 _matmul_partition_k_param_9,
	.param .u32 _matmul_partition_k_param_10,
	.param .u32 _matmul_partition_k_param_11,
	.param .u64 _matmul_partition_k_param_12
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<57>;
	.reg .b16 	%rs<66>;
	.reg .b32 	%r<469>;
	.reg .f32 	%f<178>;
	.reg .b64 	%rd<139>;
	.loc	1 30 0                          // partition_k_profile.py:30:0
$L__func_begin0:
	.loc	1 30 0                          // partition_k_profile.py:30:0

// %bb.0:
	ld.param.u32 	%r69, [_matmul_partition_k_param_11];
	ld.param.u32 	%r68, [_matmul_partition_k_param_10];
	ld.param.u64 	%rd32, [_matmul_partition_k_param_2];
	ld.param.u64 	%rd31, [_matmul_partition_k_param_1];
	ld.param.u64 	%rd30, [_matmul_partition_k_param_0];
$L__tmp0:
	.loc	1 64 26                         // partition_k_profile.py:64:26
	// begin inline asm
	mov.u32 %r70, %ctaid.x;
	// end inline asm
	.loc	1 65 26                         // partition_k_profile.py:65:26
	// begin inline asm
	mov.u32 %r71, %ctaid.y;
	// end inline asm
	.loc	1 66 27                         // partition_k_profile.py:66:27
	// begin inline asm
	mov.u32 %r72, %ctaid.z;
	// end inline asm
	ld.param.u32 	%r136, [_matmul_partition_k_param_3];
	.loc	1 87 23                         // partition_k_profile.py:87:23
	shl.b32 	%r2, %r70, 5;
	ld.param.u32 	%r137, [_matmul_partition_k_param_4];
	.loc	1 87 51                         // partition_k_profile.py:87:51
	mov.u32 	%r3, %tid.x;
	ld.param.u32 	%r138, [_matmul_partition_k_param_5];
	and.b32  	%r4, %r3, 31;
	ld.param.u32 	%r139, [_matmul_partition_k_param_7];
	ld.param.u32 	%r140, [_matmul_partition_k_param_8];
	bfe.u32 	%r141, %r3, 3, 3;
	ld.param.u32 	%r142, [_matmul_partition_k_param_9];
	shl.b32 	%r143, %r3, 3;
	and.b32  	%r144, %r143, 24;
	.loc	1 87 38                         // partition_k_profile.py:87:38
	or.b32  	%r145, %r2, %r141;
	or.b32  	%r146, %r145, 8;
	or.b32  	%r147, %r145, 16;
	or.b32  	%r148, %r145, 24;
	.loc	1 87 68                         // partition_k_profile.py:87:68
	rem.s32 	%r149, %r145, %r136;
	rem.s32 	%r150, %r146, %r136;
	rem.s32 	%r151, %r147, %r136;
	rem.s32 	%r152, %r148, %r136;
	.loc	1 88 23                         // partition_k_profile.py:88:23
	shl.b32 	%r5, %r71, 5;
	.loc	1 88 38                         // partition_k_profile.py:88:38
	or.b32  	%r153, %r5, %r144;
	.loc	1 88 68                         // partition_k_profile.py:88:68
	rem.s32 	%r154, %r153, %r137;
	.loc	1 89 23                         // partition_k_profile.py:89:23
	mul.lo.s32 	%r155, %r72, %r139;
	.loc	1 89 46                         // partition_k_profile.py:89:46
	and.b32  	%r156, %r143, 56;
	bfe.u32 	%r157, %r3, 2, 4;
	.loc	1 89 33                         // partition_k_profile.py:89:33
	add.s32 	%r158, %r155, %r156;
	add.s32 	%r159, %r155, %r157;
	add.s32 	%r160, %r159, 16;
	add.s32 	%r161, %r159, 32;
	add.s32 	%r162, %r159, 48;
	.loc	1 89 63                         // partition_k_profile.py:89:63
	rem.s32 	%r163, %r158, %r138;
	rem.s32 	%r164, %r159, %r138;
	rem.s32 	%r165, %r160, %r138;
	rem.s32 	%r166, %r161, %r138;
	rem.s32 	%r167, %r162, %r138;
	.loc	1 90 53                         // partition_k_profile.py:90:53
	mad.lo.s32 	%r168, %r149, %r140, %r163;
	mad.lo.s32 	%r169, %r150, %r140, %r163;
	mad.lo.s32 	%r170, %r151, %r140, %r163;
	mad.lo.s32 	%r171, %r152, %r140, %r163;
	.loc	1 90 22                         // partition_k_profile.py:90:22
	mul.wide.s32 	%rd57, %r168, 2;
	add.s64 	%rd33, %rd30, %rd57;
	mul.wide.s32 	%rd58, %r169, 2;
	add.s64 	%rd34, %rd30, %rd58;
	mul.wide.s32 	%rd59, %r170, 2;
	add.s64 	%rd35, %rd30, %rd59;
	mul.wide.s32 	%rd60, %r171, 2;
	add.s64 	%rd36, %rd30, %rd60;
	.loc	1 91 52                         // partition_k_profile.py:91:52
	mad.lo.s32 	%r172, %r164, %r142, %r154;
	mad.lo.s32 	%r173, %r165, %r142, %r154;
	mad.lo.s32 	%r174, %r166, %r142, %r154;
	mad.lo.s32 	%r175, %r167, %r142, %r154;
	.loc	1 91 22                         // partition_k_profile.py:91:22
	mul.wide.s32 	%rd61, %r172, 2;
	add.s64 	%rd37, %rd31, %rd61;
	mul.wide.s32 	%rd62, %r173, 2;
	add.s64 	%rd38, %rd31, %rd62;
	mul.wide.s32 	%rd63, %r174, 2;
	add.s64 	%rd39, %rd31, %rd63;
	mul.wide.s32 	%rd64, %r175, 2;
	add.s64 	%rd40, %rd31, %rd64;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22
	add.s32 	%r176, %r139, 63;
$L__tmp2:
	.loc	1 108 33                        // partition_k_profile.py:108:33
	shl.b32 	%r180, %r142, 6;
	.loc	1 99 22                         // partition_k_profile.py:99:22
	setp.lt.s32 	%p25, %r176, 64;
	setp.gt.s32 	%p26, %r176, 63;
	.loc	1 104 20                        // partition_k_profile.py:104:20
	xor.b32  	%r181, %r143, %r3;
	and.b32  	%r182, %r181, 56;
	shl.b32 	%r183, %r141, 6;
	or.b32  	%r7, %r182, %r183;
	shl.b32 	%r184, %r7, 1;
	mov.u32 	%r185, global_smem;
	add.s32 	%r73, %r185, %r184;
	add.s32 	%r75, %r73, 1024;
	add.s32 	%r77, %r73, 2048;
	add.s32 	%r79, %r73, 3072;
	selp.b32 	%r74, 16, 0, %p26;
	mov.pred 	%p41, -1;
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r73 + 0 ], [ %rd33 + 0 ], 0x10, %r74;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r75 + 0 ], [ %rd34 + 0 ], 0x10, %r74;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r77 + 0 ], [ %rd35 + 0 ], 0x10, %r74;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r79 + 0 ], [ %rd36 + 0 ], 0x10, %r74;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 105 20                        // partition_k_profile.py:105:20
	and.b32  	%r186, %r181, 24;
	shl.b32 	%r187, %r157, 5;
	or.b32  	%r8, %r186, %r187;
	shl.b32 	%r188, %r8, 1;
	add.s32 	%r189, %r185, 12288;
	add.s32 	%r81, %r189, %r188;
	add.s32 	%r83, %r81, 1024;
	add.s32 	%r85, %r81, 2048;
	add.s32 	%r87, %r81, 3072;
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r81 + 0 ], [ %rd37 + 0 ], 0x10, %r74;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r83 + 0 ], [ %rd38 + 0 ], 0x10, %r74;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r85 + 0 ], [ %rd39 + 0 ], 0x10, %r74;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r87 + 0 ], [ %rd40 + 0 ], 0x10, %r74;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 99 22                         // partition_k_profile.py:99:22
	setp.gt.s32 	%p27, %r176, 127;
	.loc	1 107 18                        // partition_k_profile.py:107:18
	add.s64 	%rd41, %rd33, 128;
	add.s64 	%rd42, %rd34, 128;
	add.s64 	%rd43, %rd35, 128;
	add.s64 	%rd44, %rd36, 128;
	.loc	1 108 18                        // partition_k_profile.py:108:18
	mul.wide.s32 	%rd65, %r180, 2;
	add.s64 	%rd45, %rd37, %rd65;
	add.s64 	%rd46, %rd38, %rd65;
	add.s64 	%rd47, %rd39, %rd65;
	add.s64 	%rd48, %rd40, %rd65;
	.loc	1 104 20                        // partition_k_profile.py:104:20
	bar.sync 	0;
	add.s32 	%r89, %r73, 4096;
	add.s32 	%r91, %r73, 5120;
	add.s32 	%r93, %r73, 6144;
	add.s32 	%r95, %r73, 7168;
	selp.b32 	%r90, 16, 0, %p27;
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r89 + 0 ], [ %rd41 + 0 ], 0x10, %r90;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r91 + 0 ], [ %rd42 + 0 ], 0x10, %r90;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r93 + 0 ], [ %rd43 + 0 ], 0x10, %r90;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r95 + 0 ], [ %rd44 + 0 ], 0x10, %r90;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 105 20                        // partition_k_profile.py:105:20
	add.s32 	%r190, %r185, %r188;
	add.s32 	%r97, %r190, 16384;
	add.s32 	%r99, %r190, 17408;
	add.s32 	%r101, %r190, 18432;
	add.s32 	%r103, %r190, 19456;
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r97 + 0 ], [ %rd45 + 0 ], 0x10, %r90;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r99 + 0 ], [ %rd46 + 0 ], 0x10, %r90;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r101 + 0 ], [ %rd47 + 0 ], 0x10, %r90;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r103 + 0 ], [ %rd48 + 0 ], 0x10, %r90;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 99 22                         // partition_k_profile.py:99:22
	setp.gt.s32 	%p28, %r176, 191;
	.loc	1 107 18                        // partition_k_profile.py:107:18
	add.s64 	%rd49, %rd33, 256;
	add.s64 	%rd50, %rd34, 256;
	add.s64 	%rd51, %rd35, 256;
	add.s64 	%rd52, %rd36, 256;
	.loc	1 108 18                        // partition_k_profile.py:108:18
	add.s64 	%rd53, %rd45, %rd65;
	add.s64 	%rd54, %rd46, %rd65;
	add.s64 	%rd55, %rd47, %rd65;
	add.s64 	%rd56, %rd48, %rd65;
	.loc	1 104 20                        // partition_k_profile.py:104:20
	bar.sync 	0;
	add.s32 	%r105, %r73, 8192;
	add.s32 	%r107, %r73, 9216;
	add.s32 	%r109, %r73, 10240;
	add.s32 	%r111, %r73, 11264;
	selp.b32 	%r106, 16, 0, %p28;
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r105 + 0 ], [ %rd49 + 0 ], 0x10, %r106;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r107 + 0 ], [ %rd50 + 0 ], 0x10, %r106;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r109 + 0 ], [ %rd51 + 0 ], 0x10, %r106;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r111 + 0 ], [ %rd52 + 0 ], 0x10, %r106;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 105 20                        // partition_k_profile.py:105:20
	add.s32 	%r113, %r190, 20480;
	add.s32 	%r115, %r190, 21504;
	add.s32 	%r117, %r190, 22528;
	add.s32 	%r119, %r190, 23552;
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r113 + 0 ], [ %rd53 + 0 ], 0x10, %r106;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r115 + 0 ], [ %rd54 + 0 ], 0x10, %r106;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r117 + 0 ], [ %rd55 + 0 ], 0x10, %r106;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r119 + 0 ], [ %rd56 + 0 ], 0x10, %r106;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 104 20                        // partition_k_profile.py:104:20
	// begin inline asm
	cp.async.wait_group 0x4;
	// end inline asm
	bar.sync 	0;
	bfe.u32 	%r9, %r3, 5, 1;
	and.b32  	%r10, %r3, 7;
	bfe.u32 	%r11, %r3, 4, 1;
	shl.b32 	%r12, %r9, 4;
	and.b32  	%r191, %r3, 15;
	or.b32  	%r192, %r191, %r12;
	xor.b32  	%r193, %r11, %r10;
	shl.b32 	%r13, %r192, 6;
	shl.b32 	%r194, %r193, 3;
	or.b32  	%r14, %r13, %r194;
	shl.b32 	%r195, %r14, 1;
	add.s32 	%r125, %r185, %r195;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r460, %r461, %r462, %r463 }, [ %r125 + 0 ];
	// end inline asm
	.loc	1 105 20                        // partition_k_profile.py:105:20
	bfe.u32 	%r196, %r3, 1, 2;
	xor.b32  	%r197, %r11, %r196;
	shl.b32 	%r198, %r191, 5;
	shl.b32 	%r199, %r197, 3;
	or.b32  	%r19, %r199, %r198;
	shl.b32 	%r200, %r19, 1;
	add.s32 	%r130, %r189, %r200;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r456, %r457, %r458, %r459 }, [ %r130 + 0 ];
	// end inline asm
	or.b32  	%r24, %r11, 2;
	xor.b32  	%r201, %r24, %r196;
	shl.b32 	%r202, %r201, 3;
	or.b32  	%r25, %r202, %r198;
	shl.b32 	%r203, %r25, 1;
	add.s32 	%r135, %r189, %r203;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r452, %r453, %r454, %r455 }, [ %r135 + 0 ];
	// end inline asm
	mov.b16 	%rs50, 0x0000;
	mov.u16 	%rs51, %rs50;
	mov.u16 	%rs52, %rs50;
	mov.u16 	%rs53, %rs50;
	mov.u16 	%rs54, %rs50;
	mov.u16 	%rs55, %rs50;
	mov.u16 	%rs56, %rs50;
	mov.u16 	%rs57, %rs50;
	mov.u16 	%rs58, %rs50;
	mov.u16 	%rs59, %rs50;
	mov.u16 	%rs60, %rs50;
	mov.u16 	%rs61, %rs50;
	mov.u16 	%rs62, %rs50;
	mov.u16 	%rs63, %rs50;
	mov.u16 	%rs64, %rs50;
	mov.u16 	%rs65, %rs50;
	.loc	1 99 22                         // partition_k_profile.py:99:22
	@%p25 bra 	$L__BB0_4;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // partition_k_profile.py:0:22
	cvt.s64.s32 	%rd1, %r168;
	cvt.s64.s32 	%rd2, %r169;
	cvt.s64.s32 	%rd3, %r170;
	cvt.s64.s32 	%rd4, %r171;
	cvt.s64.s32 	%rd5, %r172;
	cvt.s64.s32 	%rd6, %r173;
	cvt.s64.s32 	%rd7, %r174;
	cvt.s64.s32 	%rd8, %r175;
	shr.s32 	%r177, %r176, 31;
	shr.u32 	%r178, %r177, 26;
	add.s32 	%r179, %r176, %r178;
	shr.s32 	%r6, %r179, 6;
	cvt.s64.s32 	%rd9, %r180;
	add.s32 	%r30, %r6, -3;
	xor.b32  	%r209, %r24, %r10;
	shl.b32 	%r210, %r209, 3;
	or.b32  	%r211, %r11, 4;
	xor.b32  	%r212, %r211, %r10;
	shl.b32 	%r213, %r212, 3;
	or.b32  	%r214, %r11, 6;
	xor.b32  	%r215, %r214, %r10;
	shl.b32 	%r216, %r215, 3;
	or.b32  	%r31, %r13, %r210;
	or.b32  	%r32, %r13, %r213;
	or.b32  	%r33, %r13, %r216;
	.loc	1 99 22                         // partition_k_profile.py:99:22
	shl.b64 	%rd10, %rd8, 1;
	mul.lo.s64 	%rd66, %rd9, 6;
	add.s64 	%rd138, %rd31, %rd66;
	shl.b64 	%rd12, %rd9, 1;
	shl.b64 	%rd13, %rd7, 1;
	shl.b64 	%rd14, %rd6, 1;
	shl.b64 	%rd15, %rd5, 1;
	shl.b64 	%rd67, %rd4, 1;
	add.s64 	%rd68, %rd67, %rd30;
	add.s64 	%rd137, %rd68, 384;
	shl.b64 	%rd69, %rd3, 1;
	add.s64 	%rd70, %rd69, %rd30;
	add.s64 	%rd136, %rd70, 384;
	shl.b64 	%rd71, %rd2, 1;
	add.s64 	%rd72, %rd71, %rd30;
	add.s64 	%rd135, %rd72, 384;
	shl.b64 	%rd73, %rd1, 1;
	add.s64 	%rd74, %rd73, %rd30;
	add.s64 	%rd134, %rd74, 384;
	mov.b32 	%r468, 2;
	mov.b32 	%r466, 0;
	mov.f32 	%f162, 0f00000000;
	shl.b32 	%r389, %r31, 1;
	shl.b32 	%r394, %r32, 1;
	shl.b32 	%r395, %r33, 1;
	mov.u32 	%r464, %r189;
	mov.u32 	%r465, %r185;
	mov.f32 	%f163, %f162;
	mov.f32 	%f164, %f162;
	mov.f32 	%f165, %f162;
	mov.f32 	%f166, %f162;
	mov.f32 	%f167, %f162;
	mov.f32 	%f168, %f162;
	mov.f32 	%f169, %f162;
	mov.f32 	%f170, %f162;
	mov.f32 	%f171, %f162;
	mov.f32 	%f172, %f162;
	mov.f32 	%f173, %f162;
	mov.f32 	%f174, %f162;
	mov.f32 	%f175, %f162;
	mov.f32 	%f176, %f162;
	mov.f32 	%f177, %f162;
	mov.u32 	%r467, %r466;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p37, %r466, %r30;
	.loc	1 104 20                        // partition_k_profile.py:104:20
	add.s32 	%r221, %r465, %r389;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r271, %r272, %r273, %r274 }, [ %r221 + 0 ];
	// end inline asm
	.loc	1 105 20                        // partition_k_profile.py:105:20
	add.s32 	%r391, %r464, %r200;
	add.s32 	%r226, %r391, 1024;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r222, %r223, %r224, %r225 }, [ %r226 + 0 ];
	// end inline asm
	add.s32 	%r393, %r464, %r203;
	add.s32 	%r231, %r393, 1024;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r227, %r228, %r229, %r230 }, [ %r231 + 0 ];
	// end inline asm
	.loc	1 106 33                        // partition_k_profile.py:106:33
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f162, %f163, %f164, %f165 }, { %r460, %r461, %r462, %r463 }, { %r456, %r457 }, { %f162, %f163, %f164, %f165 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f166, %f167, %f168, %f169 }, { %r460, %r461, %r462, %r463 }, { %r458, %r459 }, { %f166, %f167, %f168, %f169 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f170, %f171, %f172, %f173 }, { %r460, %r461, %r462, %r463 }, { %r452, %r453 }, { %f170, %f171, %f172, %f173 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f174, %f175, %f176, %f177 }, { %r460, %r461, %r462, %r463 }, { %r454, %r455 }, { %f174, %f175, %f176, %f177 };
	// end inline asm
	.loc	1 104 20                        // partition_k_profile.py:104:20
	add.s32 	%r260, %r465, %r394;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r310, %r311, %r312, %r313 }, [ %r260 + 0 ];
	// end inline asm
	.loc	1 105 20                        // partition_k_profile.py:105:20
	add.s32 	%r265, %r391, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r261, %r262, %r263, %r264 }, [ %r265 + 0 ];
	// end inline asm
	add.s32 	%r270, %r393, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r266, %r267, %r268, %r269 }, [ %r270 + 0 ];
	// end inline asm
	.loc	1 106 33                        // partition_k_profile.py:106:33
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f162, %f163, %f164, %f165 }, { %r271, %r272, %r273, %r274 }, { %r222, %r223 }, { %f162, %f163, %f164, %f165 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f166, %f167, %f168, %f169 }, { %r271, %r272, %r273, %r274 }, { %r224, %r225 }, { %f166, %f167, %f168, %f169 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f170, %f171, %f172, %f173 }, { %r271, %r272, %r273, %r274 }, { %r227, %r228 }, { %f170, %f171, %f172, %f173 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f174, %f175, %f176, %f177 }, { %r271, %r272, %r273, %r274 }, { %r229, %r230 }, { %f174, %f175, %f176, %f177 };
	// end inline asm
	.loc	1 104 20                        // partition_k_profile.py:104:20
	add.s32 	%r299, %r465, %r395;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r365, %r366, %r367, %r368 }, [ %r299 + 0 ];
	// end inline asm
	.loc	1 105 20                        // partition_k_profile.py:105:20
	add.s32 	%r304, %r391, 3072;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r300, %r301, %r302, %r303 }, [ %r304 + 0 ];
	// end inline asm
	add.s32 	%r309, %r393, 3072;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r305, %r306, %r307, %r308 }, [ %r309 + 0 ];
	// end inline asm
	.loc	1 106 33                        // partition_k_profile.py:106:33
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f162, %f163, %f164, %f165 }, { %r310, %r311, %r312, %r313 }, { %r261, %r262 }, { %f162, %f163, %f164, %f165 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f166, %f167, %f168, %f169 }, { %r310, %r311, %r312, %r313 }, { %r263, %r264 }, { %f166, %f167, %f168, %f169 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f170, %f171, %f172, %f173 }, { %r310, %r311, %r312, %r313 }, { %r266, %r267 }, { %f170, %f171, %f172, %f173 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f174, %f175, %f176, %f177 }, { %r310, %r311, %r312, %r313 }, { %r268, %r269 }, { %f174, %f175, %f176, %f177 };
	// end inline asm
	.loc	1 108 18                        // partition_k_profile.py:108:18
	add.s64 	%rd79, %rd138, %rd15;
	add.s64 	%rd80, %rd138, %rd14;
	add.s64 	%rd81, %rd138, %rd13;
	.loc	1 99 22                         // partition_k_profile.py:99:22
	add.s64 	%rd82, %rd138, %rd10;
	add.s32 	%r396, %r467, 1;
	add.s32 	%r397, %r468, 1;
	.loc	1 104 20                        // partition_k_profile.py:104:20
	bar.sync 	0;
	selp.b32 	%r335, 16, 0, %p37;
	.loc	1 99 22                         // partition_k_profile.py:99:22
	setp.lt.s32 	%p38, %r397, 3;
	setp.lt.s32 	%p39, %r396, 3;
	selp.b32 	%r467, %r396, 0, %p39;
	selp.b32 	%r468, %r397, 0, %p38;
	.loc	1 104 20                        // partition_k_profile.py:104:20
	shl.b32 	%r398, %r468, 12;
	add.s32 	%r400, %r185, %r398;
	add.s32 	%r334, %r400, %r184;
	add.s32 	%r336, %r334, 1024;
	add.s32 	%r338, %r334, 2048;
	add.s32 	%r340, %r334, 3072;
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r334 + 0 ], [ %rd134 + 0 ], 0x10, %r335;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r336 + 0 ], [ %rd135 + 0 ], 0x10, %r335;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r338 + 0 ], [ %rd136 + 0 ], 0x10, %r335;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r340 + 0 ], [ %rd137 + 0 ], 0x10, %r335;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 105 20                        // partition_k_profile.py:105:20
	add.s32 	%r403, %r189, %r398;
	add.s32 	%r342, %r403, %r188;
	add.s32 	%r344, %r342, 1024;
	add.s32 	%r346, %r342, 2048;
	add.s32 	%r348, %r342, 3072;
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r342 + 0 ], [ %rd79 + 0 ], 0x10, %r335;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r344 + 0 ], [ %rd80 + 0 ], 0x10, %r335;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r346 + 0 ], [ %rd81 + 0 ], 0x10, %r335;
	// end inline asm
	// begin inline asm
	@%p41 cp.async.cg.shared.global [ %r348 + 0 ], [ %rd82 + 0 ], 0x10, %r335;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 104 20                        // partition_k_profile.py:104:20
	shl.b32 	%r405, %r467, 12;
	add.s32 	%r465, %r185, %r405;
	// begin inline asm
	cp.async.wait_group 0x4;
	// end inline asm
	bar.sync 	0;
	.loc	1 105 20                        // partition_k_profile.py:105:20
	add.s32 	%r464, %r189, %r405;
	.loc	1 104 20                        // partition_k_profile.py:104:20
	add.s32 	%r354, %r465, %r195;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r460, %r461, %r462, %r463 }, [ %r354 + 0 ];
	// end inline asm
	.loc	1 105 20                        // partition_k_profile.py:105:20
	add.s32 	%r359, %r464, %r200;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r456, %r457, %r458, %r459 }, [ %r359 + 0 ];
	// end inline asm
	add.s32 	%r364, %r464, %r203;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r452, %r453, %r454, %r455 }, [ %r364 + 0 ];
	// end inline asm
	.loc	1 106 33                        // partition_k_profile.py:106:33
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f162, %f163, %f164, %f165 }, { %r365, %r366, %r367, %r368 }, { %r300, %r301 }, { %f162, %f163, %f164, %f165 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f166, %f167, %f168, %f169 }, { %r365, %r366, %r367, %r368 }, { %r302, %r303 }, { %f166, %f167, %f168, %f169 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f170, %f171, %f172, %f173 }, { %r365, %r366, %r367, %r368 }, { %r305, %r306 }, { %f170, %f171, %f172, %f173 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %f174, %f175, %f176, %f177 }, { %r365, %r366, %r367, %r368 }, { %r307, %r308 }, { %f174, %f175, %f176, %f177 };
	// end inline asm
	.loc	1 99 22                         // partition_k_profile.py:99:22
	add.s32 	%r466, %r466, 1;
	add.s64 	%rd138, %rd138, %rd12;
	add.s64 	%rd137, %rd137, 128;
	add.s64 	%rd136, %rd136, 128;
	add.s64 	%rd135, %rd135, 128;
	add.s64 	%rd134, %rd134, 128;
	setp.ne.s32 	%p40, %r6, %r466;
	@%p40 bra 	$L__BB0_2;
// %bb.3:                               // %._crit_edge.loopexit
	.loc	1 109 25                        // partition_k_profile.py:109:25
	cvt.rn.f16.f32 	%rs50, %f162;
	cvt.rn.f16.f32 	%rs51, %f163;
	cvt.rn.f16.f32 	%rs52, %f164;
	cvt.rn.f16.f32 	%rs53, %f165;
	cvt.rn.f16.f32 	%rs54, %f166;
	cvt.rn.f16.f32 	%rs55, %f167;
	cvt.rn.f16.f32 	%rs56, %f168;
	cvt.rn.f16.f32 	%rs57, %f169;
	cvt.rn.f16.f32 	%rs58, %f170;
	cvt.rn.f16.f32 	%rs59, %f171;
	cvt.rn.f16.f32 	%rs60, %f172;
	cvt.rn.f16.f32 	%rs61, %f173;
	cvt.rn.f16.f32 	%rs62, %f174;
	cvt.rn.f16.f32 	%rs63, %f175;
	cvt.rn.f16.f32 	%rs64, %f176;
	cvt.rn.f16.f32 	%rs65, %f177;
$L__BB0_4:                              // %._crit_edge
	.loc	1 88 38                         // partition_k_profile.py:88:38
	or.b32  	%r407, %r5, %r9;
	or.b32  	%r408, %r407, 30;
	or.b32  	%r409, %r407, 28;
	or.b32  	%r410, %r407, 26;
	or.b32  	%r411, %r407, 24;
	or.b32  	%r412, %r407, 22;
	or.b32  	%r413, %r407, 20;
	or.b32  	%r414, %r407, 18;
	or.b32  	%r415, %r407, 16;
	or.b32  	%r416, %r407, 14;
	or.b32  	%r417, %r407, 12;
	or.b32  	%r418, %r407, 10;
	or.b32  	%r419, %r407, 8;
	or.b32  	%r420, %r407, 6;
	or.b32  	%r421, %r407, 4;
	or.b32  	%r422, %r407, 2;
	.loc	1 87 38                         // partition_k_profile.py:87:38
	or.b32  	%r423, %r2, %r4;
	.loc	1 99 22                         // partition_k_profile.py:99:22
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	.loc	1 116 24                        // partition_k_profile.py:116:24
	mul.lo.s32 	%r424, %r423, %r68;
	.loc	1 116 10                        // partition_k_profile.py:116:10
	mul.wide.s32 	%rd99, %r424, 2;
	add.s64 	%rd100, %rd32, %rd99;
	.loc	1 117 24                        // partition_k_profile.py:117:24
	mul.lo.s32 	%r425, %r407, %r69;
	mul.lo.s32 	%r426, %r422, %r69;
	mul.lo.s32 	%r427, %r421, %r69;
	mul.lo.s32 	%r428, %r420, %r69;
	mul.lo.s32 	%r429, %r419, %r69;
	mul.lo.s32 	%r430, %r418, %r69;
	mul.lo.s32 	%r431, %r417, %r69;
	mul.lo.s32 	%r432, %r416, %r69;
	mul.lo.s32 	%r433, %r415, %r69;
	mul.lo.s32 	%r434, %r414, %r69;
	mul.lo.s32 	%r435, %r413, %r69;
	mul.lo.s32 	%r436, %r412, %r69;
	mul.lo.s32 	%r437, %r411, %r69;
	mul.lo.s32 	%r438, %r410, %r69;
	mul.lo.s32 	%r439, %r409, %r69;
	mul.lo.s32 	%r440, %r408, %r69;
	.loc	1 117 10                        // partition_k_profile.py:117:10
	mul.wide.s32 	%rd101, %r425, 2;
	add.s64 	%rd102, %rd100, %rd101;
	mul.wide.s32 	%rd103, %r426, 2;
	add.s64 	%rd104, %rd100, %rd103;
	mul.wide.s32 	%rd105, %r427, 2;
	add.s64 	%rd106, %rd100, %rd105;
	mul.wide.s32 	%rd107, %r428, 2;
	add.s64 	%rd108, %rd100, %rd107;
	mul.wide.s32 	%rd109, %r429, 2;
	add.s64 	%rd110, %rd100, %rd109;
	mul.wide.s32 	%rd111, %r430, 2;
	add.s64 	%rd112, %rd100, %rd111;
	mul.wide.s32 	%rd113, %r431, 2;
	add.s64 	%rd114, %rd100, %rd113;
	mul.wide.s32 	%rd115, %r432, 2;
	add.s64 	%rd116, %rd100, %rd115;
	mul.wide.s32 	%rd117, %r433, 2;
	add.s64 	%rd118, %rd100, %rd117;
	mul.wide.s32 	%rd119, %r434, 2;
	add.s64 	%rd120, %rd100, %rd119;
	mul.wide.s32 	%rd121, %r435, 2;
	add.s64 	%rd122, %rd100, %rd121;
	mul.wide.s32 	%rd123, %r436, 2;
	add.s64 	%rd124, %rd100, %rd123;
	mul.wide.s32 	%rd125, %r437, 2;
	add.s64 	%rd126, %rd100, %rd125;
	mul.wide.s32 	%rd127, %r438, 2;
	add.s64 	%rd128, %rd100, %rd127;
	mul.wide.s32 	%rd129, %r439, 2;
	add.s64 	%rd130, %rd100, %rd129;
	mul.wide.s32 	%rd131, %r440, 2;
	add.s64 	%rd132, %rd100, %rd131;
	.loc	1 118 10                        // partition_k_profile.py:118:10
	mul.wide.s32 	%rd133, %r72, 2;
	add.s64 	%rd83, %rd102, %rd133;
	add.s64 	%rd84, %rd104, %rd133;
	add.s64 	%rd85, %rd106, %rd133;
	add.s64 	%rd86, %rd108, %rd133;
	add.s64 	%rd87, %rd110, %rd133;
	add.s64 	%rd88, %rd112, %rd133;
	add.s64 	%rd89, %rd114, %rd133;
	add.s64 	%rd90, %rd116, %rd133;
	add.s64 	%rd91, %rd118, %rd133;
	add.s64 	%rd92, %rd120, %rd133;
	add.s64 	%rd93, %rd122, %rd133;
	add.s64 	%rd94, %rd124, %rd133;
	add.s64 	%rd95, %rd126, %rd133;
	add.s64 	%rd96, %rd128, %rd133;
	add.s64 	%rd97, %rd130, %rd133;
	add.s64 	%rd98, %rd132, %rd133;
	.loc	1 120 29                        // partition_k_profile.py:120:29
	shr.u32 	%r441, %r4, 2;
	shl.b32 	%r442, %r3, 1;
	and.b32  	%r443, %r442, 6;
	or.b32  	%r444, %r12, %r441;
	mad.lo.s32 	%r445, %r443, 33, %r444;
	shl.b32 	%r446, %r445, 1;
	add.s32 	%r448, %r185, %r446;
	st.shared.b16 	[%r448], %rs50;
	st.shared.b16 	[%r448+66], %rs51;
	st.shared.b16 	[%r448+16], %rs52;
	st.shared.b16 	[%r448+82], %rs53;
	bar.sync 	0;
	mad.lo.s32 	%r449, %r9, 33, %r4;
	shl.b32 	%r450, %r449, 1;
	add.s32 	%r451, %r185, %r450;
	ld.shared.u16 	%rs34, [%r451];
	ld.shared.u16 	%rs35, [%r451+132];
	ld.shared.u16 	%rs36, [%r451+264];
	ld.shared.u16 	%rs37, [%r451+396];
	bar.sync 	0;
	st.shared.b16 	[%r448], %rs54;
	st.shared.b16 	[%r448+66], %rs55;
	st.shared.b16 	[%r448+16], %rs56;
	st.shared.b16 	[%r448+82], %rs57;
	bar.sync 	0;
	ld.shared.u16 	%rs38, [%r451];
	ld.shared.u16 	%rs39, [%r451+132];
	ld.shared.u16 	%rs40, [%r451+264];
	ld.shared.u16 	%rs41, [%r451+396];
	bar.sync 	0;
	st.shared.b16 	[%r448], %rs58;
	st.shared.b16 	[%r448+66], %rs59;
	st.shared.b16 	[%r448+16], %rs60;
	st.shared.b16 	[%r448+82], %rs61;
	bar.sync 	0;
	ld.shared.u16 	%rs42, [%r451];
	ld.shared.u16 	%rs43, [%r451+132];
	ld.shared.u16 	%rs44, [%r451+264];
	ld.shared.u16 	%rs45, [%r451+396];
	bar.sync 	0;
	st.shared.b16 	[%r448], %rs62;
	st.shared.b16 	[%r448+66], %rs63;
	st.shared.b16 	[%r448+16], %rs64;
	st.shared.b16 	[%r448+82], %rs65;
	bar.sync 	0;
	ld.shared.u16 	%rs46, [%r451];
	ld.shared.u16 	%rs47, [%r451+132];
	ld.shared.u16 	%rs48, [%r451+264];
	ld.shared.u16 	%rs49, [%r451+396];
	.loc	1 120 25                        // partition_k_profile.py:120:25
	// begin inline asm
	@%p41 st.global.b16 [ %rd83 + 0 ], { %rs34 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd84 + 0 ], { %rs35 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd85 + 0 ], { %rs36 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd86 + 0 ], { %rs37 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd87 + 0 ], { %rs38 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd88 + 0 ], { %rs39 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd89 + 0 ], { %rs40 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd90 + 0 ], { %rs41 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd91 + 0 ], { %rs42 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd92 + 0 ], { %rs43 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd93 + 0 ], { %rs44 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd94 + 0 ], { %rs45 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd95 + 0 ], { %rs46 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd96 + 0 ], { %rs47 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd97 + 0 ], { %rs48 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.b16 [ %rd98 + 0 ], { %rs49 };
	// end inline asm
	.loc	1 120 4                         // partition_k_profile.py:120:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/srir/tritonbench/tritonbench/operators/gemm/partition_k_profile.py"
	.file	2 "/home/srir/triton/python/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 163                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x9c DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 112                                 // DW_AT_name
.b8 97
.b8 114
.b8 116
.b8 105
.b8 116
.b8 105
.b8 111
.b8 110
.b8 95
.b8 107
.b8 95
.b8 112
.b8 114
.b8 111
.b8 102
.b8 105
.b8 108
.b8 101
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 115
.b8 114
.b8 105
.b8 114
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 98
.b8 101
.b8 110
.b8 99
.b8 104
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 98
.b8 101
.b8 110
.b8 99
.b8 104
.b8 47
.b8 111
.b8 112
.b8 101
.b8 114
.b8 97
.b8 116
.b8 111
.b8 114
.b8 115
.b8 47
.b8 103
.b8 101
.b8 109
.b8 109
.b8 0
.b8 2                                   // Abbrev [2] 0x62:0x16 DW_TAG_subprogram
.b8 95                                  // DW_AT_name
.b8 109
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 112
.b8 97
.b8 114
.b8 116
.b8 105
.b8 116
.b8 105
.b8 111
.b8 110
.b8 95
.b8 107
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x78:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 98                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x8d:0x18 DW_TAG_inlined_subroutine
.b32 98                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 99                                  // DW_AT_call_line
.b8 39                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
